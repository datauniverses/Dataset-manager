runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
?icon
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dashboardPage
runApp()
?dashboardControlbar
runApp()
runApp()
runApp()
runApp()
runApp()
?tabItem
?bs4TabItem
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?socialBox
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?h1
runApp()
?bs4SocialCard
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
?a
runApp()
runApp()
install.packages("shinyFiles")
require(bs4Dash)
require(bslib)
require(shinyFiles)
?shinyFilesButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?shinyFileChoose
runApp()
runApp()
getwd()
runApp()
type(getwd())
class(getwd())
?ns()
?session$ns
runApp()
?NS
c("R Installation" = R.home())
runApp()
?getVolumes
getVolumes()
getVolumes()
runApp()
runApp()
View(volumes)
volumes()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("shiny-file-input-area.R")
?fileInputArea
shiny::runApp()
runApp()
runApp()
fileInputArea <- function(inputId, label, multiple = FALSE, accept = NULL,
width = NULL, buttonLabel = "Browse...", placeholder = "No file selected") {
restoredValue <- restoreInput(id = inputId, default = NULL)
# Catch potential edge case - ensure that it's either NULL or a data frame.
if (!is.null(restoredValue) && !is.data.frame(restoredValue)) {
warning("Restored value for ", inputId, " has incorrect format.")
restoredValue <- NULL
}
if (!is.null(restoredValue)) {
restoredValue <- toJSON(restoredValue, strict_atomic = FALSE)
}
inputTag <- tags$input(
id = inputId,
name = inputId,
type = "file",
# Don't use "display: none;" style, which causes keyboard accessibility issue; instead use the following workaround: https://css-tricks.com/places-its-tempting-to-use-display-none-but-dont/
style = "position: absolute !important; top: -99999px !important; left: -99999px !important;",
`data-restore` = restoredValue
)
if (multiple) {
inputTag$attribs$multiple <- "multiple"
}
if (length(accept) > 0) {
inputTag$attribs$accept <- paste(accept, collapse = ",")
}
div(
class = "form-group shiny-input-container w-100",
style = htmltools::css(width = htmltools::validateCssUnit(width)),
shiny:::shinyInputLabel(inputId, ""),
div(
class = "input-group mb-3",
# input-group-prepend is for bootstrap 4 compat
tags$label(
class = "input-group-btn input-group-prepend w-100",
span(
class = "btn btn-area w-100", inputTag,
div(tags$image(src = icon_encoded, width = "80px;"), style = "margin-top: 2rem;"),
div(p(label), style = "font-size: 1.2rem; font-weight: 700; padding-top: 2rem;"),
div(p(buttonLabel), style = "font-size: 1rem; font-weight: 400; margin-bottom: 2rem;")
)
)
),
tags$div(
id = paste(inputId, "_progress", sep = ""),
class = "progress active shiny-file-input-progress",
tags$div(class = "progress-bar")
)
)
}
# Use Bootstrap 5 colors $gray-700 and $gray-600
css_btn_area <- textConnection("
.btn-area {
color: #495057;
border-color: #495057;
border-style: dashed;
border-width: 2px;
border-radius: 20px;
background-color: transparent;
}
.btn-area:hover {
color: #6c757d;
}
.progress {
height: 32px;
}
.progress .progress-bar {
font-size: 16px;
line-height: 28px;
}")
# Icon from <https://icons.getbootstrap.com/icons/upload/>
icon_file <- tempfile(fileext = ".svg")
writeLines('
<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#495057" class="bi bi-upload" viewBox="0 0 16 16">
<path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
<path d="M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708l3-3z"/>
</svg>',
con = icon_file
)
icon_encoded <- xfun::base64_uri(icon_file)
card <- function(title, ...) {
htmltools::tags$div(
class = "card",
htmltools::tags$div(class = "card-header", title),
htmltools::tags$div(class = "card-body", ...)
)
}
# ui <- shiny::fluidPage(
#   title = "File input area for Shiny (Bootstrap 5)",
#   theme = bslib::bs_theme(version = 5),
#   lang = "en",
#   includeCSS(css_btn_area),
#   shiny::fluidRow(
#     style = "margin-top: 20px;",
#     shiny::column(
#       width = 10, offset = 1,
#       card(
#         title = "File input area for Shiny (Bootstrap 5)",
#         shiny::fluidRow(
#           column(
#             width = 4, offset = 4,
#             fileInputArea(
#               "upload",
#               label = "Drop your plain text files here!",
#               buttonLabel = "Any plain text file, max 100 KB each.",
#               multiple = TRUE,
#               accept = "text/plain"
#             ),
#             shiny::tableOutput("files")
#           )
#         )
#       )
#     )
#   )
# )
#
# server <- function(input, output, session) {
#   output$files <- renderTable(
#     input$upload[, c("name", "type", "size")],
#     width = "100%"
#   )
# }
#
# options(shiny.maxRequestSize = 0.1 * 1024^2)
# shiny::shinyApp(ui, server)
fileInputArea("upload_dataset_area" , label = "UPLOAD DATASET" , multiple = F)
runApp()
source("shiny-file-input-area.R")
about.me.style <- "font-family: Roboto Condensed;
font-weight: 400;
font-style: normal;
font-size: 18px;
letter-spacing: 0em;
line-height: 1.8em;
text-transform: none;
color: #222;"
ui <- dashboardPage(
includeCSS(css_btn_area) ,
dashboardHeader(title = "Dataset Manager" ),
dashboardSidebar(collapsed = F, skin = "light",
sidebarMenu(
menuItem("Home" , tabName = "home_side_bar", icon = icon("house") ),
menuItem("About" , tabName = "about_side_bar", icon=icon("address-card" , lib = "font-awesome"))
)
),
controlbar = dashboardControlbar(
skin = "light",
collapsed = T,
div(class = "p-3", skinSelector()),
pinned = F
),
title = "Skin Selector",
dashboardBody(bs4TabItems(
bs4TabItem(tabName = "home_side_bar",
fileInputArea("upload_dataset_area" , label = "UPLOAD DATASET" , multiple = F)
),
bs4TabItem(tabName =  "about_side_bar",
bs4SocialCard(width = 12 , maximizable = T , collapsible = F , height =800,
title = strong(h1("ABOUT" , style = "font-family: bebas-neue;font-weight: 400;
font-style: normal;
font-size: 80px;
letter-spacing: .03em;
line-height: .9em;
text-transform: none;
text-align:center")),
p("I am a data scientist with experience in machine learning and statistical analysis. I have worked on a variety of projects, including predictive modeling and computer vision." , style = about.me.style),
h4("Education"),
p("Bachelor  in Computer Science, Al-Hussein-Bin-Talal, Jordan" , style = about.me.style),
tags$h4("Skills" , style = about.me.style),
tags$ul(
tags$li("R shiny", style = about.me.style),
tags$li("Python programming", style = about.me.style),
tags$li("Machine learning", style = about.me.style),
),
tags$h4("Contact info", style = about.me.style),
tags$ul(style = about.me.style,
tags$li(tags$a("jamilaboyousef@yahoo.com" , href = "mailto:jamilaboyousef@yahoo.com") ,style = about.me.style),
tags$li(tags$a("00962775999233" , href = "tel:00962775999233") , style = about.me.style),
)
)
)
))
)
includeCSS(css_btn_area)
dashboardHeader(title = "Dataset Manager" )
dashboardSidebar(collapsed = F, skin = "light",
sidebarMenu(
menuItem("Home" , tabName = "home_side_bar", icon = icon("house") ),
menuItem("About" , tabName = "about_side_bar", icon=icon("address-card" , lib = "font-awesome"))
)
)
controlbar = dashboardControlbar(
skin = "light",
collapsed = T,
div(class = "p-3", skinSelector()),
pinned = F
)
controlbar
bs4TabItem(tabName = "home_side_bar",
fileInputArea("upload_dataset_area" , label = "UPLOAD DATASET" , multiple = F)
)
fileInputArea("upload_dataset_area" , label = "UPLOAD DATASET" , multiple = F)
runApp()
ncludeCSS(css_btn_area)
includeCSS(css_btn_area)
?includeCSS
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
class(input$upload_dataset_area)
dataset <- input$"upload_dataset_area"
View(dataset)
dataset.path <- input$"upload_dataset_area"$datapath
rm(dataset)
dataset.path
dataset <- read.csv(dataset.path)
View(dataset)
View(dataset)
runApp()
runApp()
iris
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?uiOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
?DT::dataTableOutput
runApp()
runApp()
runApp()
runApp()
?renderDataTable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?box
runApp()
runApp()
runApp()
runApp()
?box
runApp()
?bs4Table
runApp()
runApp()
runApp()
?ggplot2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dataset)
?geom_point
runApp()
runApp()
?box
runApp()
require(bs4Dash)
require(bslib)
require(shinyFiles)
require(ggplot2)
runApp()
runApp()
?geom_abline
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dataset)
View(dataset)
runApp()
View(dataset)
runApp()
require(plotly)
?plot_ly
runApp()
runApp()
install.packages("shiny.fluent")
require(bs4Dash)
require(bslib)
require(plotly)
require(shiny.fluent)
runApp()
require(bs4Dash)
require(bslib)
require(plotly)
require(shiny.fluent)
runApp()
?Dropdown.shinyInput
runApp()
runApp()
runApp()
dropdownMenu()
?dropdownMenu
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plot_ly
runApp()
runApp()
runApp()
runApp()
runApp()
require(bs4Dash)
require(bslib)
require(plotly)
require(shiny.fluent)
?radioButtons
runApp()
runApp()
runApp()
runApp()
runApp()
